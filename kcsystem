#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <winsock.h>
#include <mysql.h>
# include<conio.h>
#include<time.h>
#include<string.h>
 MYSQL *connection;
 MYSQL_RES *result;
 MYSQL_RES *resultset;
 MYSQL_RES *r;
 MYSQL_ROW row;
 MYSQL_RES *result1;
 MYSQL_RES *resultset1;
 MYSQL_RES *r1;
 MYSQL_RES *r2;
 MYSQL_RES *r3;
 MYSQL_RES *r4;
 MYSQL_RES *r5;
 MYSQL_ROW row1;
 char *server = "127.0.0.1";
 char *user = "root";
 char *password = "";
 char *database = "kcelsystem";
 char myquery[255];
 char myquery1[255];
 char request[255];

 MYSQL_ROW record1;
 MYSQL_ROW record2;
 char dates[255];
 char pupil_id[4];
 char assignmentid[20];
 int percentage;
 int tot=0;
 char checkattempt[255];
 MYSQL_ROW check;
 char current_date[11];
 int current_hour;
 int current_minutes;
 
  void viewAll(){

         connection = mysql_init(0);
         MYSQL_ROW record;

         if (!mysql_real_connect(connection, server, user, password, database, 0, NULL, 0)) {
         fprintf(stderr, "%s\n", mysql_error(connection));
         exit(1);
         }

         if(mysql_query(connection, "SELECT Assignment_ID, Assignment_Date FROM assignment")){
            printf("Unable to connect");
            mysql_close(connection);
            return 1;
         }
         r = mysql_store_result(connection);
        if(r==NULL){
            printf("Unable to compile SQL statement\n");
            mysql_close(connection);
            return 1;
        }
        puts("Assignment_ID \t\t Date");
        while (record = mysql_fetch_row(r)){
            printf("%s\t\t %s\n",record[0], record[1] );
        }
        mysql_close(connection);

 }

 //this function is for viewing details of a particular assignment from the database
 void viewAssignment(){
     char sqlquery[255];

         connection = mysql_init(0);
         MYSQL_ROW record1;
         if (!mysql_real_connect(connection, server, user, password, database, 0, NULL, 0)) {
         fprintf(stderr, "%s\n", mysql_error(connection));
         exit(1);
         }

         //char assignment[2];
        // printf("Enter assignmentID:\t");
         scanf("%s", assignmentid);
         fflush(stdin);


         strcpy(myquery, "SELECT * FROM assignment WHERE Assignment_Id = \'");
         strcat(myquery, assignmentid);
         strcat(myquery, "\'");

         if(mysql_query(connection, myquery)){
            printf("Unable to connect");
            mysql_close(connection);
            return 1;
         }
         r1 = mysql_store_result(connection);
        if(r1==NULL){
            printf("Unable to compile SQL statement\n");
            mysql_close(connection);
            return 1;
        }
        puts("Assignment_ID\t\tAssignment\t\tDate\t\tStartTime\t\tEndTime");
        record1 = mysql_fetch_row(r1);
            printf("%s\t\t %d\t\t %s\t\t %s\t\t %s\t\t\n",record1[0], strlen(record1[1]), record1[2], record1[3], record1[4] );


        mysql_close(connection);
 }
 
 
 //this function inserts a request into the database
 void requestActivation(){
     char pupil_id[10];
     printf("Enter your pupil_id:\t");
     scanf("%s",pupil_id);
     fflush(stdin);

     connection = mysql_init(NULL);
         MYSQL_ROW record1;
         if (!mysql_real_connect(connection, server, user, password, database, 0, NULL, 0)) {
         fprintf(stderr, "%s\n", mysql_error(connection));
         exit(1);
         }

         strcpy(myquery, "SELECT * FROM pupil WHERE Pupil_ID = \'");
         strcat(myquery,pupil_id );
         strcat(myquery, "\'");

         if(mysql_query(connection, myquery)){
            printf("Unable to connect");
            mysql_close(connection);
            return 1;
         }
         r1 = mysql_store_result(connection);
        if(r1==NULL){
            printf("Unable to compile SQL statement\n");
            mysql_close(connection);
            return 1;
        }
        char status[20];
         record1 = mysql_fetch_row(r1);
         strcpy(status, record1[4]);
         if(strcmp("active",status)==0){
                printf("..........you are active.........");
                            return 1;

                }


         strcpy(request,"INSERT INTO activation_request (Pupil_ID)values( \'");
         strcat(request,pupil_id);
         strcat(request,"\')");
         if(mysql_query(connection,request)){
            printf("Unable to insert data");
            mysql_close(connection);
         }
         mysql_close(connection);
         printf("Request sent");
 }



//this function is for checking assignments between dates
    void checkDates(){
    char sqlquery[255];
    int assignmentID;
         connection = mysql_init(0);
         MYSQL_ROW record2;
         if (!mysql_real_connect(connection, server, user, password, database, 0, NULL, 0)) {
         fprintf(stderr, "%s\n", mysql_error(connection));
         exit(1);
         }

         char str1[10];
         char str2[10];
         printf("From:\t");
         scanf("%s", str1);
         printf("To:\t");
         scanf("%s", str2);
         fflush(stdin);



         strcpy(dates, "SELECT Assignment_ID FROM assignment WHERE Assignment_Date BETWEEN \'");
         strcat(dates, str1);
         strcat(dates, "\'AND\'");
         strcat(dates, str2);
         strcat(dates, "\'");

         if(mysql_query(connection, dates)){
            printf("Unable to connect");
            mysql_close(connection);
            return 1;
         }
         r2 = mysql_store_result(connection);
        if(r2==NULL){
            printf("Unable to compile SQL statement\n");
            mysql_close(connection);
            return 1;
        }
        while (record2 = mysql_fetch_row(r2)){
            printf("%s\n",record2[0]);
        }

        mysql_close(connection);
 }
 
 //this function grades the assignment

int grade(int A[26][28], int B[], int c){
    int total=0;
    for(int index=0; index<28; index++){

        if(A[c][index]==B[index]){
        total+=1;
        }

}
return total;
}
int reference(char c){

    char letters[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    for(int i=0; i<26; i++){
        if(c==letters[i])
            return i;

    }
}


 
 
int attemptassignment(){
         int Answer[28];
    char assignment[5];

    int pattern[26][28]={{0,1,1,0,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1},
    {1,1,1,0,1,0,0,1,1,0,0,1,1,1,1,0,1,0,0,1,1,0,0,1,1,1,1,0},
    {0,0,1,1,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1},
    {1,1,0,0,1,0,1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,0,1,1,0,0},
    {1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1},
    {1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0},
    {0,1,1,0,1,0,0,1,1,0,0,0,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,0},
    {1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1},
    {1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},
    {0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,1,1,0},
    {1,0,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,1,0,1,0,0,1},
    {1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1},
    {1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1},
    {1,0,0,1,1,1,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1},
    {0,1,1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,1,1,0},
    {1,1,1,0,1,0,0,1,1,0,0,1,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0},
    {0,1,1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,1,1,0,0,0,0,1},
    {1,1,1,0,1,0,0,1,1,0,0,1,1,1,1,0,1,1,0,0,1,0,1,0,1,0,0,1},
    {0,1,1,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,1,0,1,1,0},
    {1,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0},
    {1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,1,1,0},
    {1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,1,0,0},
    {1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1},
    {1,0,0,1,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,1,0,0,1},
    {1,0,0,1,1,0,0,1,1,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0},
    {1,1,1,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,1,1,1,1}};


connection = mysql_init(NULL);

        if (!mysql_real_connect(connection, server, user, password, database, 0, NULL, 0)) {
         fprintf(stderr, "%s\n", mysql_error(connection));
        exit(1);
        }

         scanf("%s", assignmentid);
         fflush(stdin);


         // this is for the deactivated student

         strcpy(myquery, "SELECT * FROM pupil WHERE Pupil_ID = \'");
         strcat(myquery,pupil_id);
         strcat(myquery, "\'");

         if(mysql_query(connection, myquery)){
            printf("Unable to connect");
            mysql_close(connection);
            return 1;
         }
         r2 = mysql_store_result(connection);
        if(r2==NULL){
            printf("Unable to compile SQL statement\n");
            mysql_close(connection);
            return 1;
        }
        char status[20];
         record1 = mysql_fetch_row(r2);
         strcpy(status, record1[4]);
         if(strcmp("deactivated",status)==0){
                printf(".......Request for activation from teacher......");
                            return 1;

                }





//this checks whether an assignment has been attempted

    strcpy(checkattempt,"SELECT Pupil_ID FROM score WHERE Assignment_ID = \'");
    strcat(checkattempt,assignmentid);
    strcat(checkattempt,"\'AND Pupil_ID=\'");
    strcat(checkattempt,pupil_id);
    strcat(checkattempt,"\'");
    mysql_query(connection,checkattempt);
    r4=mysql_store_result(connection);
    check=mysql_num_rows(r4);



    if(check > 0){
        puts("You already attempted this assignment");

}
 else
    {
    puts(".....attempt this assignment....");




//this is for displaying the assignment

         strcpy(myquery, "SELECT * FROM assignment WHERE Assignment_Id = \'");
         strcat(myquery, assignmentid);
         strcat(myquery, "\'");

         if(mysql_query(connection, myquery)){
            printf("Unable to connect");
            mysql_close(connection);
            return 1;
         }
         r1 = mysql_store_result(connection);
        if(r1==NULL){
            printf("Unable to compile SQL statement\n");
            mysql_close(connection);
            return 1;
        }
        puts("Assignment_ID\t\tAssignment\t\tDate\t\tStartTime\t\tEndTime");
        record1 = mysql_fetch_row(r1);

            printf("%s\t\t %s\t\t %s\t\t %s\t\t %s\t\t\n",record1[0], record1[1], record1[4], record1[2], record1[3] );
            strcpy(assignment,record1[1]);





// this checks whether the assignment is with in time for attempt


    time_t t;

    t = time(NULL);
    struct tm tm = *localtime(&t);


    char D[3];
    int current_day = tm.tm_mday;
    sprintf(D, "%d", current_day);


    char M[3];
    int current_month=tm.tm_mon+1;
    sprintf(M, "%d", current_month);


    char Y[5];
    int current_year=tm.tm_year+1900;
    sprintf(Y, "%d", current_year);

    strcpy(current_date,Y);


    strcat(current_date,"-");

    if(strlen(M)==1){
        strcat(current_date,"0");
        strcat(current_date,M);
    }
       else
     strcat(current_date,M);
    strcat(current_date,"-");

    if(strlen(D)==1){
        strcat(current_date,"0");
        strcat(current_date,D);
    }
       else {

   strcat(current_date,D);
   }

    current_hour= tm.tm_hour;
    current_minutes = tm.tm_min;
    char SH[3];
    char EH[3];
    char SM[3];
    char EM[3];







if(strcmp(current_date,record1[4])==0){
            char startT[10],endT[10];
            strcpy(startT,record1[2]);
          SH[0]=startT[0];
           SH[1]=startT[1];
           SM[0]=startT[3];
           SM[1]=startT[4];

            strcpy(endT,record1[3]);
          EH[0]=endT[0];
           EH[1]=endT[1];
           EM[0]=endT[3];
           EM[1]=endT[4];
           int c=atoi(SH) , d=atoi(EH), e=atoi(SM), f=atoi(EM);
           if(current_hour>=c && d>=current_hour){
            if((c!=d) || (current_minutes >=e && f>=current_minutes)){
                    printf("Ready for attempt\t\t \n");
                    goto ATTEMPT;






            }
            else{
                printf("You cannot attempt this assignment now\n");
                mysql_close(connection);
                return 1;


            }

           }
            else{
            printf("You cannot attempt this assignment now\n");
            mysql_close(connection);
            return 1;
            }

        }
        else{
            printf("You cannot attempt this assignment now\n");
            mysql_close(connection);
            return 1;
            }
        mysql_close(connection);








//this is for attempting the assignment


    time_t start,stop;

    int u;
    int v;
    int score=0;

    ATTEMPT:
    for(int d = 0;d<strlen(assignment);d++){
            printf("Draw pattern for letter %c\n\n",assignment[d]);
            int k=0;
    start= time(NULL);
    kcel:

    for(int row=0; row<7; row++){
        for(int col=0; col<4; col++){
            printf("enter 1 or 0 at position [%d,%d]:\n",row, col );
            scanf("%d", &Answer[k]);
            if(Answer[k]!=1 && Answer[k]!=0){
                printf("wrong input,repeat\n");
                k=0;
                goto kcel;
            }
            k++;
        }
    }
    printf("\n");
    //this displays what a student has attempted
    printf("This is what you have done\n\n");
    int p=0;
    for(int row=0; row<7; row++){
        for(int col=0; col<4; col++){
            if(Answer[p]==1){
                printf("*");
                p++;
            }
            else if(Answer[p]==0){
                printf(" ");
                p++;
            }
        }
        printf("\n");}
     //this displays the right character
        printf("The correct character is\n\n");
        int r = 0;
        int q= reference(assignment[d]);
        for(int row=0; row<7; row++){
        for(int col=0; col<4; col++){
            if(pattern[q][r]==1)
                printf("*");
            else
                printf(" ");
            r++;
        }
        printf("\n");
    }
    printf("\n\n");

    stop=time(NULL);
     printf("Time taken is %.4f seconds\n", difftime(stop,start));
     tot+= difftime(stop,start);
    int charI= reference(assignment[d]);
    int f=grade(pattern,Answer,charI);
    score+=grade(pattern,Answer,charI);


    printf("Your marks for letter %c is %d", assignment[d], f);

    printf("\n\n");

    }
    v= strlen(assignment)*28;
    percentage= (float)score/v * 100;


    printf("Total Time taken is %d seconds\n", tot);
    printf("score is %d\n",score);
    printf("Your Total Percentage is %d",percentage );

    insertscore();
    }
 }


             menu:
puts("\n\n\n\t\t\t\t\tMENU");
puts("\t1:VIEWALL-Display assignment number and date, showing if attempted or not");
puts("\t2:CHECKSTATUS-Displays the status report of the pupil summarising all assignments");
puts("\t3:VIEWASSIGNMMENT assignmentid-To see the details of a specified assignment");
puts("\t4:CHECKDATES dates from and to-Shows if there is an assignment within a specified date range");
puts("\t5:REQUESTACTIVATION-Used for pupil to request activation from teacher");
puts("\t6:ATTEMPTASSIGNMMENT assignmentid-To attempt a specified assignment\n\n");
printf("Enter your choice:");
scanf("%s",x );
        int num;
if(strcmp("VIEWALL",x)==0){

    viewAll();
    do{
    printf("\nEnter 1 to go to Menu\n");
    scanf("%d",&num);

    system("cls");
    goto menu;}
    while(num == 1);

}
  else if(strcmp("ATTEMPTASSIGNMENT",x)==0){
    attemptassignment();


    do{
    printf("\nEnter 1 to go to Menu\n");
    scanf("%d",&num);

    system("cls");
    goto menu;}
    while(num == 1);

}
   else if(strcmp("CHECKSTATUS",x)==0){
        checkstatus();
        do{
    printf("\nEnter 1 to go to Menu\n");
    scanf("%d",&num);

    system("cls");
    goto menu;}
    while(num == 1);


}
   else if(strcmp("VIEWASSIGNMENT",x)==0){
    viewAssignment();
    do{
    printf("\nEnter 1 to go to Menu\n");
    scanf("%d",&num);

    system("cls");
    goto menu;}
    while(num == 1);

}
     else if(strcmp("REQUESTACTIVATION",x)==0){
    requestActivation();
    do{
    printf("\nEnter 1 to go to Menu\n");
    scanf("%d",&num);

    system("cls");
    goto menu;}
    while(num == 1);

}
   else if(strcmp("CHECKDATES",x)==0){
   checkDates();
   do{
    printf("\nEnter 1 to go to Menu\n");
    scanf("%d",&num);

    system("cls");
    goto menu;}
    while(num == 1);

}

   else {
    do{
    printf("\nEnter 1 to go to Menu\n");
    scanf("%d",&num);

    system("cls");
    goto menu;}
    while(num == 1);


   }
}






